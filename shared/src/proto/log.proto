syntax = "proto3";
package log;

// 日志服务定义
service LogService {
  // 获取日志条目
  rpc GetLogs (GetLogsRequest) returns (GetLogsResponse);
  
  // 流式获取日志（实时日志）
  rpc StreamLogs (StreamLogsRequest) returns (stream LogEntry);
  
  // 清除日志
  rpc ClearLogs (ClearLogsRequest) returns (ClearLogsResponse);
  
  // 导出日志
  rpc ExportLogs (ExportLogsRequest) returns (ExportLogsResponse);
  
  // 获取日志统计
  rpc GetLogStats (GetLogStatsRequest) returns (GetLogStatsResponse);
}

// 获取日志请求
message GetLogsRequest {
  int32 limit = 1;              // 返回的最大日志数量，0表示全部
  string level_filter = 2;      // 日志级别过滤：all, trace, debug, info, warn, error
  string module_filter = 3;     // 模块过滤
  string search_text = 4;       // 搜索文本
  int64 start_time = 5;         // 开始时间戳（可选）
  int64 end_time = 6;           // 结束时间戳（可选）
  bool reverse = 7;             // 是否反向排序（最新的在前）
}

// 获取日志响应
message GetLogsResponse {
  repeated LogEntry logs = 1;   // 日志条目列表
  int32 total_count = 2;        // 总日志数量
  bool has_more = 3;            // 是否还有更多日志
}

// 日志条目
message LogEntry {
  int64 timestamp = 1;          // 时间戳
  LogLevel level = 2;           // 日志级别
  string module = 3;            // 模块名称
  string message = 4;           // 日志消息
  string thread_id = 5;         // 线程ID
  string file = 6;              // 源文件
  int32 line = 7;               // 行号
  map<string, string> fields = 8; // 额外字段
}

// 日志级别枚举
enum LogLevel {
  LOG_LEVEL_UNKNOWN = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 2;
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
}

// 流式日志请求
message StreamLogsRequest {
  string level_filter = 1;      // 日志级别过滤
  string module_filter = 2;     // 模块过滤
  bool follow = 3;              // 是否持续跟踪新日志
  int32 tail = 4;               // 先返回最近的N条日志
}

// 清除日志请求
message ClearLogsRequest {
  bool clear_all = 1;           // 是否清除所有日志
  int64 before_timestamp = 2;   // 清除此时间戳之前的日志
}

// 清除日志响应
message ClearLogsResponse {
  bool success = 1;             // 是否成功
  int32 cleared_count = 2;      // 清除的日志数量
  string message = 3;           // 响应消息
}

// 导出日志请求
message ExportLogsRequest {
  ExportFormat format = 1;      // 导出格式
  string level_filter = 2;      // 日志级别过滤
  string module_filter = 3;     // 模块过滤
  int64 start_time = 4;         // 开始时间戳
  int64 end_time = 5;           // 结束时间戳
  bool compress = 6;            // 是否压缩
}

// 导出格式枚举
enum ExportFormat {
  EXPORT_FORMAT_UNKNOWN = 0;
  EXPORT_FORMAT_JSON = 1;       // JSON格式
  EXPORT_FORMAT_CSV = 2;        // CSV格式
  EXPORT_FORMAT_PLAIN = 3;      // 纯文本格式
}

// 导出日志响应
message ExportLogsResponse {
  bool success = 1;             // 是否成功
  bytes data = 2;               // 导出的数据
  string filename = 3;          // 推荐的文件名
  string mime_type = 4;         // MIME类型
  int32 log_count = 5;          // 导出的日志数量
  int64 file_size = 6;          // 文件大小
}

// 获取日志统计请求
message GetLogStatsRequest {
  int64 start_time = 1;         // 开始时间戳
  int64 end_time = 2;           // 结束时间戳
}

// 获取日志统计响应
message GetLogStatsResponse {
  int64 total_logs = 1;         // 总日志数量
  map<string, int64> level_counts = 2;  // 各级别日志数量
  map<string, int64> module_counts = 3; // 各模块日志数量
  int64 error_count = 4;        // 错误数量
  int64 warn_count = 5;         // 警告数量
  repeated LogTrend trends = 6; // 日志趋势
}

// 日志趋势
message LogTrend {
  int64 timestamp = 1;          // 时间戳
  int64 log_count = 2;          // 日志数量
  int64 error_count = 3;        // 错误数量
  int64 warn_count = 4;         // 警告数量
}