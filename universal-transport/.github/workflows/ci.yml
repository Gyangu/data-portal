name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-test:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run tests
      run: cargo test --verbose --all-features
    
    - name: Run integration tests
      run: cargo test --verbose --all-features --test '*'

  swift-test:
    name: Swift Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        swift: ["5.9"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          swift/.build
          swift/Package.resolved
        key: ${{ runner.os }}-spm-${{ hashFiles('swift/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build Swift Package
      run: |
        cd swift
        swift build
    
    - name: Run Swift Tests
      run: |
        cd swift
        swift test
    
    - name: Check Swift formatting
      run: |
        cd swift
        swift-format lint --recursive Sources/ Tests/

  cross-platform-integration:
    name: Cross-Platform Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: [rust-test, swift-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Swift (macOS)
      if: runner.os == 'macOS'
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
    
    - name: Setup Swift (Linux)
      if: runner.os == 'Linux'
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "5.9"
    
    - name: Build Rust components
      run: cargo build --release
    
    - name: Build Swift components (macOS)
      if: runner.os == 'macOS'
      run: |
        cd swift
        swift build -c release
    
    - name: Build Swift components (Linux)
      if: runner.os == 'Linux'
      run: |
        cd swift
        swift build -c release
    
    - name: Run integration tests
      run: |
        # Run cross-platform communication tests here
        echo "Running integration tests..."
        cargo run --example basic_communication &
        sleep 2
        cd swift && swift run UniversalTransportExample

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [rust-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run benchmarks
      run: |
        cd benchmarks
        cargo bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmarks/target/criterion/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build Rust docs
      run: cargo doc --no-deps --all-features
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc